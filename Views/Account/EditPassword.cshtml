@model Customer
@inject DropDown.IPageMetaTag TagManager
@{

    var URL = TagManager.GetURL();
}

@section MetaContent{

    <title>Change Password - nutriplanner.softwareengineer.lk</title>
    <meta name="description" content="Change Password for nutriplanner.softwareengineer.lk Customer">
    <meta name="keywords" content="">

    <meta name="og:url" content="@URL">
    <meta name="og:type" content="website">
    <meta name="og:title" content="Change Password - nutriplanner.softwareengineer.lk">
    <meta name="og:description" content="Change Password for nutriplanner.softwareengineer.lk Customer">
    <meta name="og:image" content="">
}


<div class="page-content pt-2 pb-4">
    <div class="container mt-1">

        <div class="login-popup">
            <div class="col-lg-12 mb-6 ">
                <h4 class="title-simple text-center">Enter your new password here</h4>
                <div class="alert alert-danger alert-dark alert-round alert-inline  @(ViewData["ErrorMessage"] == null ? "d-none" : "")">
                    @(ViewData["ErrorMessage"])
                </div>


            </div>
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row form-group">
                    <div class="mt-2">
                        @Html.LabelFor(model => model.OldPassword, htmlAttributes: new { @class = "" })
                        @Html.EditorFor(model => model.OldPassword, new { htmlAttributes = new { @class = "form-control", autofocus = "autofocus" } })
                        @Html.ValidationMessageFor(model => model.OldPassword, "", new { @class = "text-danger" })
                    </div>
                    <div class="mt-2">
                        <label>New Password</label>
                        @Html.EditorFor(model => model.LoginPassword, new { htmlAttributes = new { @class = "form-control", autofocus = "autofocus" } })
                        @Html.ValidationMessageFor(model => model.LoginPassword, "", new { @class = "text-danger" })
                    </div>
                    <div class="mt-2">
                        @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "" })
                        @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", autofocus = "autofocus" } })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>



                </div>

                <button class="btn btn-dark btn-block btn-rounded mt-2" type="submit">Update</button>
                <a href="~/Account/Index" class="d-block mt-3 text-muted">Cancel password reset</a>
            }
        </div>
    </div>

</div>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    <script>

    </script>

}